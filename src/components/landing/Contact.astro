---
import { getCollection } from 'astro:content';
import {DateRangePicker} from "@heroui/date-picker";

export interface Props {
  itemId: string;
}

const { itemId } = Astro.props;
console.log(Astro.props);
const collections = {
  woodworking: await getCollection("woodworking"),
  gardening: await getCollection("gardening"),
  metalworking: await getCollection("metalworking"),
};
let item: any = null;
if (itemId) {
  for (const [_, collection] of Object.entries(collections)) {
    item = collection.find(entry => entry.id === itemId);
    if (item){
        break;
    }
  }
}
---

<div class="contact-form-container bg-gray-900">

  {item ? (
    <div class="product-info">
      <h2>Demande de r√©servation pour: {item.data.name}</h2>
      <DateRangePicker
      calendarProps={{
        classNames: {
          base: "bg-background",
          headerWrapper: "pt-4 bg-background",
          prevButton: "border-1 border-default-200 rounded-small",
          nextButton: "border-1 border-default-200 rounded-small",
          gridHeader: "bg-background shadow-none border-b-1 border-default-100",
          cellButton: [
            "data-[today=true]:bg-default-100 data-[selected=true]:bg-transparent rounded-small",
            // start (pseudo)
            "data-[range-start=true]:before:rounded-l-small",
            "data-[selection-start=true]:before:rounded-l-small",
            // end (pseudo)
            "data-[range-end=true]:before:rounded-r-small",
            "data-[selection-end=true]:before:rounded-r-small",
            // start (selected)
            "data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:rounded-small",
            // end (selected)
            "data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:rounded-small",
          ],
        },
      }}
      className="max-w-xs"
      label="Stay duration"
      variant="bordered"
    />
    </div>
  ) : (
    <p>Please fill out the form below to contact us.</p>
  )}

  <form id="contactForm" method="POST" action="/submit-form">
    <label for="name">Name</label>
    <input type="text" id="name" name="name" required>

    <label for="email">Email</label>
    <input type="email" id="email" name="email" required>

    <label for="message">Message</label>
    <textarea id="message" name="message" required></textarea>

    <input type="hidden" name="itemId" value={itemId || ''}>

    <button type="submit">Send Message</button>
    <div id="message-box" class="message-box"></div>
  </form>
</div>

<style>
  .contact-form-container {
    font-family: 'Inter', sans-serif;
    color: #1f2937;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    width: 100%;
  }
  h1 {
    font-size: 2.25rem;
    font-weight: 600;
    color: #1e293b;
    margin-bottom: 2rem;
    text-align: center;
  }
  p {
    font-size: 1rem;
    line-height: 1.75rem;
    color: #4b5563;
    margin-bottom: 1rem;
    text-align: center;
  }
  form {
    background-color: #ffffff;
    border-radius: 0.5rem;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);
    padding: 2rem;
    width: 100%;
    max-width: 600px;
    margin-bottom: 2rem;
  }
  label {
    display: block;
    font-size: 0.875rem;
    font-weight: 600;
    color: #374151;
    margin-bottom: 0.5rem;
  }
  input,
  textarea {
    width: 100%;
    padding: 0.75rem;
    border-radius: 0.375rem;
    border: 1px solid #d1d5db;
    font-size: 1rem;
    margin-bottom: 1rem;
    outline: none;
    box-sizing: border-box;
  }
  input:focus,
  textarea:focus {
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
  }
  textarea {
    resize: vertical;
    min-height: 120px;
  }
  button {
    background-color: #4caf50;
    color: #ffffff;
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s ease;
    width: 100%;
    border: none;
  }
  button:hover {
    background-color: #45a049;
  }
  button:disabled {
    background-color: #b3e5b9;
    cursor: not-allowed;
  }
  .product-info {
    background-color: #e5e7eb;
    padding: 1.5rem;
    border-radius: 0.5rem;
    margin-bottom: 2rem;
    text-align: center;
    width: 100%;
    max-width: 600px;
  }
  .product-info h2 {
    font-size: 1.5rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 1rem;
  }
  .product-info p {
    margin-bottom: 0.5rem;
  }
  .message-box {
    margin-top: 1rem;
    padding: 1rem;
    border-radius: 0.375rem;
    text-align: center;
    font-weight: 500;
  }
  .message-box.success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }
  .message-box.error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }
</style>

<script>
  const contactForm = document.getElementById('contactForm');
  const messageBox = document.getElementById('message-box');

  if (contactForm) { //check if form exists
    contactForm.addEventListener('submit', async (event) => {
      event.preventDefault();

      const formData = new FormData(contactForm);
      const response = await fetch('/submit-form', {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const result = await response.json();
        messageBox.className = 'message-box success';
        messageBox.textContent = result.message;
        contactForm.reset();
      } else {
        const errorText = await response.text();
        messageBox.className = 'message-box error';
        messageBox.textContent = errorText;
      }
    });
  }
</script>
